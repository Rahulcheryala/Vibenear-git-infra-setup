name: Staging Promotion
run-name: PR from develop to staging by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      create_pr:
        description: "Create PR from develop to staging"
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1: Analyze Develop Commits
  commit-analysis:
    name: Commit Analysis
    runs-on: ubuntu-latest
    outputs:
      promotion_needed: ${{ steps.analyze.outputs.promotion_needed }}
      commit_count: ${{ steps.analyze.outputs.commit_count }}
      promotion_id: ${{ steps.analyze.outputs.promotion_id }}
      timestamp: ${{ steps.analyze.outputs.timestamp }}
      new_commits: ${{ steps.analyze.outputs.new_commits }}
      existing_pr: ${{ steps.analyze.outputs.existing_pr }}
      groups: ${{ steps.analyze.outputs.groups }}
      grouped_commits_md: ${{ steps.analyze.outputs.grouped_commits_md }}
      feature_prs_md: ${{ steps.analyze.outputs.feature_prs_md }}

    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch staging branch
        run: |
          echo "📥 Fetching staging branch for comparison..."
          git fetch origin staging:origin-staging
          echo "✅ Staging branch fetched successfully"

      - name: Analyze develop commits for staging promotion
        id: analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "📥 Ensuring origin/staging is up to date..."
          git fetch origin staging:origin-staging

          echo "🔍 Quick tree diff (develop vs staging)..."
          if git diff --quiet origin-staging..HEAD; then
            echo "✅ Develop and staging have identical content"
            {
              echo "promotion_needed=false"
              echo "commit_count=0"
              echo "promotion_id="
              echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')"
              echo "existing_pr="
              echo "new_commits="
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "📝 Getting commits to promote (develop -> staging)..."
          # Get SHAs (oldest first) and human lines for PR body
          mapfile -t SHAS_IN_RANGE < <(git rev-list --no-merges --reverse origin-staging..HEAD || true)
          mapfile -t COMMITS < <(git log origin-staging..HEAD --oneline --no-merges || true)

          if [ "${#COMMITS[@]}" -eq 0 ]; then
            echo "ℹ️ No new commits found in develop"
            {
              echo "promotion_needed=false"
              echo "commit_count=0"
              echo "promotion_id="
              echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')"
              echo "existing_pr="
              echo "new_commits="
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "🔎 Check if an open develop→staging PR exists..."
          EXISTING_PR="$(gh pr list --base staging --head develop --state open --json number --jq '.[0].number' || true)"
          EXISTING_ID=""
          if [ -n "${EXISTING_PR:-}" ] && [ "${EXISTING_PR}" != "null" ]; then
            echo "ℹ️ Open PR detected: #$EXISTING_PR"
            PR_TEXT="$(gh pr view "$EXISTING_PR" --json title,body --jq '[.title,.body]|join("\n")' || true)"
            # Extract existing Promotion ID if present
            EXISTING_ID="$(printf "%s" "$PR_TEXT" | sed -nE 's/.*Promotion ID[^`]*`([^`]+)`.*/\1/p' | head -n1 || true)"
          fi

          TIMESTAMP="$(date +'%d/%m/%Y %H:%M:%S UTC')"
          if [ -n "${EXISTING_ID:-}" ]; then
            PROMOTION_ID="$EXISTING_ID"
            echo "🔁 Reusing existing PR promotion ID: $PROMOTION_ID"
          else
            PROMOTION_ID="staging_$(date +'%d-%m-%Y_%H.%M.%S')"
            echo "🆕 Generated new promotion ID: $PROMOTION_ID"
          fi

          # Build commits list for PR body
          NEW_COMMITS=""
          for commit in "${COMMITS[@]}"; do
            NEW_COMMITS+="${commit}"$'\n'
          done

          COMMIT_COUNT="${#COMMITS[@]}"

          # Group by feature head ref using GitHub API (first associated PR)
          declare -A GROUP_TO_SHAS
          declare -A GROUP_TO_PR

          for sha in "${SHAS_IN_RANGE[@]}"; do
            pr_json="$(gh api -H "Accept: application/vnd.github+json" repos/${GITHUB_REPOSITORY}/commits/${sha}/pulls --jq '.[0] | {url: .html_url, head: .head.ref}' 2>/dev/null || true)"
            group=""
            pr_url=""
            if [ -n "$pr_json" ]; then
              group="$(printf '%s' "$pr_json" | jq -r '.head // empty')"
              pr_url="$(printf '%s' "$pr_json" | jq -r '.url // empty')"
            fi
            if [[ -z "$group" || ! "$group" =~ ^feature/ ]]; then
              group="misc/ungrouped"
            fi
            if [ -n "${GROUP_TO_SHAS[$group]:-}" ]; then
              GROUP_TO_SHAS[$group]="${GROUP_TO_SHAS[$group]} $sha"
            else
              GROUP_TO_SHAS[$group]="$sha"
            fi
            if [ -n "$pr_url" ] && [ -z "${GROUP_TO_PR[$group]:-}" ]; then
              GROUP_TO_PR[$group]="$pr_url"
            fi
          done

          GROUPED_MD=$'### 🧩 Commits Grouped by Feature\n\n'
          FEATURE_PRS_MD=$'### 🔗 Feature PRs\n\n'
          GROUPS_LINES=""

          mapfile -t GROUP_NAMES < <(printf '%s\n' "${!GROUP_TO_SHAS[@]}" | sort)
          for group in "${GROUP_NAMES[@]}"; do
            shas_line="${GROUP_TO_SHAS[$group]}"
            GROUPS_LINES+="$group|$shas_line"$'\n'
            GROUPED_MD+="#### $group"$'\n'
            pr_link="${GROUP_TO_PR[$group]:-}"
            if [ -n "$pr_link" ]; then
              FEATURE_PRS_MD+="- $group: $pr_link"$'\n'
              GROUPED_MD+="PR: $pr_link"$'\n'
            fi
            for s in $shas_line; do
              subj="$(git log -n1 --format=%s "$s")"
              GROUPED_MD+="- ${s:0:7} ${subj}"$'\n'
            done
            GROUPED_MD+=$'\n'
          done

          echo "📊 Analysis Results:"
          echo "  • Commits to promote: $COMMIT_COUNT"
          echo "  • Promotion ID: $PROMOTION_ID"
          echo "  • Timestamp: $TIMESTAMP"
          echo ""
          echo "📝 Commits to be promoted to staging (grouped):"
          printf "%s\n" "$GROUPED_MD"
          echo ""

          {
            echo "promotion_needed=true"
            echo "commit_count=$COMMIT_COUNT"
            echo "promotion_id=$PROMOTION_ID"
            echo "timestamp=$TIMESTAMP"
            echo "existing_pr=${EXISTING_PR:-}"
          } >> "$GITHUB_OUTPUT"
          {
            echo "new_commits<<EOF"
            printf "%s\n" "$NEW_COMMITS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          {
            echo "groups<<EOF"
            printf "%s\n" "$GROUPS_LINES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          {
            echo "grouped_commits_md<<EOF"
            printf "%s\n" "$GROUPED_MD"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          {
            echo "feature_prs_md<<EOF"
            printf "%s\n" "$FEATURE_PRS_MD"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  # Job 2: Create Staging Promotion PR
  create-pr:
    name: Create Staging PR
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true' && inputs.create_pr
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
      pr_url: ${{ steps.create_pr.outputs.pr_url }}

    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure full fetch (including develop)
        run: |
          git fetch --all --prune
          git fetch origin develop:origin-develop --prune

      - name: Build temp release branch with grouped squash commits
        id: build_temp_branch
        run: |
          set -euo pipefail

          PROMOTION_ID="${{ needs.commit-analysis.outputs.promotion_id }}"
          TEMP_BRANCH="staging-promotion/${PROMOTION_ID}"

          echo "📦 Creating temp branch from staging: $TEMP_BRANCH"
          git checkout -B "$TEMP_BRANCH" origin/staging

          echo "🔀 Applying grouped cherry-picks as squash commits"
          GROUPS_DATA='${{ needs.commit-analysis.outputs.groups }}'
          echo "$GROUPS_DATA" | while IFS='|' read -r group shas; do
            [ -z "$group" ] && continue
            [ -z "$shas" ] && continue
            echo "  • Group: $group"
            echo "    SHAs: $shas"
            git cherry-pick -n $shas
            git commit -m "$group"
          done

          echo "🚀 Pushing temp branch"
          git push -u origin "$TEMP_BRANCH" --force

          echo "temp_branch=$TEMP_BRANCH" >> "$GITHUB_OUTPUT"

      - name: Create or reuse PR from temp branch to staging
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          REPO="${GITHUB_REPOSITORY}"

          TITLE="Staging Promotion: ${{ needs.commit-analysis.outputs.promotion_id }}"

          BODY_CONTENT="## 🚀 Staging Promotion

          This PR promotes features from \`develop\` to \`staging\` for testing.

          ### 📋 Promotion Information
          - **Promotion ID**: \`${{ needs.commit-analysis.outputs.promotion_id }}\`
          - **Timestamp**: ${{ needs.commit-analysis.outputs.timestamp }}
          - **Commit Count**: ${{ needs.commit-analysis.outputs.commit_count }} commits
          - **Source**: \`develop\`
          - **Target**: \`staging\`
          - **Triggered By**: @${{ github.actor }} via manual workflow dispatch

          ### 🔗 Feature PRs
          ${{ needs.commit-analysis.outputs.feature_prs_md }}

          ### 📝 Commits to be Deployed
          ${{ needs.commit-analysis.outputs.grouped_commits_md }}

          ### 🔄 What Happens on Merge
          1. This PR branch contains one commit per feature group
          2. Merge with "Create a merge commit" or "Rebase and merge" to preserve grouped commits
          3. Staging deployment will be triggered
          4. Changes will be available for testing in staging environment

          ### ✅ Pre-merge Checklist
          - [ ] Code review complete
          - [ ] All tests passing on develop
          - [ ] No breaking changes without migration plan
          - [ ] Ready for QA testing

          ---
          🔍 This will deploy to **STAGING** environment for testing.

          👥 Reviewers: @rahulcheryala"

          echo "📝 Ensuring PR base=staging head=${{ steps.build_temp_branch.outputs.temp_branch }}"

          echo "🔎 Checking for existing open PR from temp branch → staging..."
          EXISTING_NUMBER="$(gh pr list --base staging --head "${{ steps.build_temp_branch.outputs.temp_branch }}" --state open --json number --jq '.[0].number' || true)"
          if [ -n "${EXISTING_NUMBER:-}" ] && [ "${EXISTING_NUMBER}" != "null" ]; then
            PR_NUMBER="$EXISTING_NUMBER"
            echo "🔁 Reusing PR #$PR_NUMBER and updating title/body..."
            gh api -X PATCH "repos/${REPO}/pulls/${PR_NUMBER}" -f title="$TITLE" -f body="$BODY_CONTENT" >/dev/null
          else
            echo "🆕 Creating PR base=staging head=${{ steps.build_temp_branch.outputs.temp_branch }}..."
            PR_NUMBER="$(gh api -X POST "repos/${REPO}/pulls" \
              -f title="$TITLE" \
              -f head="${{ steps.build_temp_branch.outputs.temp_branch }}" \
              -f base="staging" \
              -f body="$BODY_CONTENT" \
              --jq .number)"
          fi

          PR_URL="$(gh api "repos/${REPO}/pulls/${PR_NUMBER}" --jq .html_url)"

          echo "🏷️ Adding labels and requesting reviewers..."
          printf '{"labels":["staging","deployment","promotion","auto-generated"]}\n' > labels.json
          gh api -X POST "repos/${REPO}/issues/${PR_NUMBER}/labels" --input labels.json >/dev/null || true
          printf '{"reviewers":["rahulcheryala"]}\n' > reviewers.json
          gh api -X POST "repos/${REPO}/pulls/${PR_NUMBER}/requested_reviewers" --input reviewers.json >/dev/null || true

          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
          echo "🔗 PR Link: $PR_URL"

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [commit-analysis, create-pr]
    if: always() && needs.commit-analysis.outputs.promotion_needed == 'true'
    steps:
      - name: Display workflow summary
        run: |
          echo ""
          echo "================================================"
          echo "🚀 STAGING PROMOTION WORKFLOW COMPLETED"
          echo "================================================"
          echo ""
          echo "✅ Analysis complete"
          if [ "${{ needs.create-pr.result }}" = "success" ]; then
            echo "✅ PR created/updated"
          else
            echo "⚠️ PR not created (skipped or failed)"
          fi
          echo ""
          echo "📋 Promotion Details:"
          echo "  • Promotion ID: ${{ needs.commit-analysis.outputs.promotion_id }}"
          echo "  • Timestamp: ${{ needs.commit-analysis.outputs.timestamp }}"
          echo "  • Commit Count: ${{ needs.commit-analysis.outputs.commit_count }}"
          echo "  • PR Number: ${{ needs.create-pr.outputs.pr_number }}"
          echo ""
          echo "🔗 PR Link: ${{ needs.create-pr.outputs.pr_url }}"
          echo "🧪 Reminder: Merging deploys to STAGING for testing."
          echo ""
