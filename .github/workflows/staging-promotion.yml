name: Staging Promotion
run-name: PR from develop to staging by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      create_pr:
        description: "Create PR from develop to staging"
        required: true
        default: true
        type: boolean
      promotion_notes:
        description: "Notes for this staging promotion"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1: Analyze Develop Commits
  commit-analysis:
    name: Commit Analysis
    runs-on: ubuntu-latest
    outputs:
      promotion_needed: ${{ steps.analyze.outputs.promotion_needed }}
      commit_count: ${{ steps.analyze.outputs.commit_count }}
      promotion_id: ${{ steps.analyze.outputs.promotion_id }}
      timestamp: ${{ steps.analyze.outputs.timestamp }}
      new_commits: ${{ steps.analyze.outputs.new_commits }}
      existing_pr: ${{ steps.analyze.outputs.existing_pr }}

    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch staging branch
        run: |
          echo "üì• Fetching staging branch for comparison..."
          git fetch origin staging:origin-staging
          echo "‚úÖ Staging branch fetched successfully"

      - name: Analyze develop commits for staging promotion
        id: analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "üì• Ensuring origin/staging is up to date..."
          git fetch origin staging:origin-staging

          echo "üîç Quick tree diff (develop vs staging)..."
          if git diff --quiet origin-staging..HEAD; then
            echo "‚úÖ Develop and staging have identical content"
            {
              echo "promotion_needed=false"
              echo "commit_count=0"
              echo "promotion_id="
              echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')"
              echo "existing_pr="
              echo "new_commits="
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "üìù Getting commits to promote (develop -> staging)..."
          # Get all commits in develop that are not in staging
          mapfile -t COMMITS < <(git log origin-staging..HEAD --oneline --no-merges || true)

          if [ "${#COMMITS[@]}" -eq 0 ]; then
            echo "‚ÑπÔ∏è No new commits found in develop"
            {
              echo "promotion_needed=false"
              echo "commit_count=0"
              echo "promotion_id="
              echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')"
              echo "existing_pr="
              echo "new_commits="
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "üîé Check if an open develop‚Üístaging PR exists..."
          EXISTING_PR="$(gh pr list --base staging --head develop --state open --json number --jq '.[0].number' || true)"
          EXISTING_ID=""
          if [ -n "${EXISTING_PR:-}" ] && [ "${EXISTING_PR}" != "null" ]; then
            echo "‚ÑπÔ∏è Open PR detected: #$EXISTING_PR"
            PR_TEXT="$(gh pr view "$EXISTING_PR" --json title,body --jq '[.title,.body]|join("\n")' || true)"
            # Extract existing Promotion ID if present
            EXISTING_ID="$(printf "%s" "$PR_TEXT" | sed -nE 's/.*Promotion ID[^`]*`([^`]+)`.*/\1/p' | head -n1 || true)"
          fi

          TIMESTAMP="$(date +'%d/%m/%Y %H:%M:%S UTC')"
          if [ -n "${EXISTING_ID:-}" ]; then
            PROMOTION_ID="$EXISTING_ID"
            echo "üîÅ Reusing existing PR promotion ID: $PROMOTION_ID"
          else
            PROMOTION_ID="staging_$(date +'%d-%m-%Y_%H.%M.%S')"
            echo "üÜï Generated new promotion ID: $PROMOTION_ID"
          fi

          # Build commits list for PR body
          NEW_COMMITS=""
          for commit in "${COMMITS[@]}"; do
            NEW_COMMITS+="${commit}"$'\n'
          done

          COMMIT_COUNT="${#COMMITS[@]}"

          echo "üìä Analysis Results:"
          echo "  ‚Ä¢ Commits to promote: $COMMIT_COUNT"
          echo "  ‚Ä¢ Promotion ID: $PROMOTION_ID"
          echo "  ‚Ä¢ Timestamp: $TIMESTAMP"
          echo ""
          echo "üìù Commits to be promoted to staging:"
          printf "%s\n" "$NEW_COMMITS"
          echo ""

          {
            echo "promotion_needed=true"
            echo "commit_count=$COMMIT_COUNT"
            echo "promotion_id=$PROMOTION_ID"
            echo "timestamp=$TIMESTAMP"
            echo "existing_pr=${EXISTING_PR:-}"
          } >> "$GITHUB_OUTPUT"
          {
            echo "new_commits<<EOF"
            printf "%s\n" "$NEW_COMMITS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  # Job 2: Create Staging Promotion PR
  create-pr:
    name: Create Staging PR
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true' && inputs.create_pr
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
      pr_url: ${{ steps.create_pr.outputs.pr_url }}

    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure full fetch
        run: git fetch --all --prune

      - name: Create or reuse PR from develop to staging
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          REPO="${GITHUB_REPOSITORY}"

          TITLE="üöÄ Staging Promotion: ${{ needs.commit-analysis.outputs.promotion_id }}"

          # Prepare promotion notes section
          if [ -n "${{ inputs.promotion_notes }}" ]; then
            PROMOTION_NOTES_SECTION="### üìù Promotion Notes
          ${{ inputs.promotion_notes }}"
          else
            PROMOTION_NOTES_SECTION="### üìù Promotion Notes
          > No additional notes provided for this promotion."
          fi

          BODY_CONTENT="## üöÄ Staging Promotion

          This PR promotes features from \`develop\` to \`staging\` for testing.

          ### üìã Promotion Information
          - **Promotion ID**: \`${{ needs.commit-analysis.outputs.promotion_id }}\`
          - **Timestamp**: ${{ needs.commit-analysis.outputs.timestamp }}
          - **Commit Count**: ${{ needs.commit-analysis.outputs.commit_count }} commits
          - **Source**: \`develop\`
          - **Target**: \`staging\`
          - **Triggered By**: @${{ github.actor }} via manual workflow dispatch

          ${PROMOTION_NOTES_SECTION}

          ### üìù Commits to be Deployed
          \`\`\`text
          ${{ needs.commit-analysis.outputs.new_commits }}
          \`\`\`

          ### üîÑ What Happens on Merge
          1. Commits will be squashed into staging (if configured)
          2. Staging deployment will be triggered
          3. Changes will be available for testing in staging environment

          ### ‚úÖ Pre-merge Checklist
          - [ ] Code review complete
          - [ ] All tests passing on develop
          - [ ] No breaking changes without migration plan
          - [ ] Ready for QA testing

          ---
          üîç This will deploy to **STAGING** environment for testing.

          üë• Reviewers: @rahulcheryala"

          echo "üìù Ensuring PR base=staging head=develop"

          echo "üîé Checking for existing open PR from develop ‚Üí staging..."
          EXISTING_NUMBER="$(gh pr list --base staging --head develop --state open --json number --jq '.[0].number' || true)"
          if [ -n "${EXISTING_NUMBER:-}" ] && [ "${EXISTING_NUMBER}" != "null" ]; then
            PR_NUMBER="$EXISTING_NUMBER"
            echo "üîÅ Reusing PR #$PR_NUMBER and updating title/body..."
            gh api -X PATCH "repos/${REPO}/pulls/${PR_NUMBER}" -f title="$TITLE" -f body="$BODY_CONTENT" >/dev/null
          else
            echo "üÜï Creating PR base=staging head=develop..."
            PR_NUMBER="$(gh api -X POST "repos/${REPO}/pulls" \
              -f title="$TITLE" \
              -f head="develop" \
              -f base="staging" \
              -f body="$BODY_CONTENT" \
              --jq .number)"
          fi

          PR_URL="$(gh api "repos/${REPO}/pulls/${PR_NUMBER}" --jq .html_url)"

          echo "üè∑Ô∏è Adding labels and requesting reviewers..."
          printf '{"labels":["staging","deployment","promotion","auto-generated"]}\n' > labels.json
          gh api -X POST "repos/${REPO}/issues/${PR_NUMBER}/labels" --input labels.json >/dev/null || true
          printf '{"reviewers":["rahulcheryala"]}\n' > reviewers.json
          gh api -X POST "repos/${REPO}/pulls/${PR_NUMBER}/requested_reviewers" --input reviewers.json >/dev/null || true

          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
          echo "üîó PR Link: $PR_URL"

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [commit-analysis, create-pr]
    if: always() && needs.commit-analysis.outputs.promotion_needed == 'true'
    steps:
      - name: Display workflow summary
        run: |
          echo ""
          echo "================================================"
          echo "üöÄ STAGING PROMOTION WORKFLOW COMPLETED"
          echo "================================================"
          echo ""
          echo "‚úÖ Analysis complete"
          if [ "${{ needs.create-pr.result }}" = "success" ]; then
            echo "‚úÖ PR created/updated"
          else
            echo "‚ö†Ô∏è PR not created (skipped or failed)"
          fi
          echo ""
          echo "üìã Promotion Details:"
          echo "  ‚Ä¢ Promotion ID: ${{ needs.commit-analysis.outputs.promotion_id }}"
          echo "  ‚Ä¢ Timestamp: ${{ needs.commit-analysis.outputs.timestamp }}"
          echo "  ‚Ä¢ Commit Count: ${{ needs.commit-analysis.outputs.commit_count }}"
          echo "  ‚Ä¢ PR Number: ${{ needs.create-pr.outputs.pr_number }}"
          echo ""
          echo "üîó PR Link: ${{ needs.create-pr.outputs.pr_url }}"
          echo "üß™ Reminder: Merging deploys to STAGING for testing."
          echo ""
