name: Sync staging and develop
run-name: Sync develop after PR merge to staging

on:
  pull_request:
    types: [closed]
    branches:
      - staging

permissions:
  contents: write

concurrency:
  group: sync-develop-after-staging-merge
  cancel-in-progress: false

jobs:
  sync-staging-to-develop:
    name: Sync staging and develop after PR merge
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.BYPASS_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Sync staging to develop
        env:
          GITHUB_TOKEN: ${{ secrets.BYPASS_TOKEN || secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          set -euo pipefail

          echo "üîç Verifying token is available..."
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "‚ùå No token available!"
            exit 1
          fi
          echo "‚úÖ Token is configured"
          echo ""

          echo "üîç Fetching latest develop and staging branches..."
          git fetch origin develop:origin-develop staging:origin-staging
          echo ""

          echo "üîß Configure git for sync commit..."
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          echo ""

          echo "üîÑ Ensuring we're on latest develop..."
          git checkout develop
          git reset --hard origin-develop
          echo ""

          # Create empty sync commit to mark the sync point
          echo "üîÄ Creating empty sync commit..."
          echo "‚ÑπÔ∏è  This empty commit marks the sync point without merge history"

          # Get the current staging SHA
          STAGING_SHA=$(git rev-parse origin-staging)
          echo "üìã Staging SHA: ${STAGING_SHA:0:7}"

          # Create empty commit with staging SHA in message
          DEVELOP_SHA=$(git rev-parse HEAD)
          git commit --allow-empty -m "Sync: staging@${STAGING_SHA:0:7} after PR #${PR_NUMBER}"
          echo "‚úÖ Empty sync commit created"

          echo "‚¨ÜÔ∏è Pushing develop to remote..."
          # The token from actions/checkout should already be configured, but let's be explicit
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git develop
          echo "‚úÖ Staging successfully synced to develop!"

  delete-promoter-branch:
    name: Delete promoter branch after PR merge to staging
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'staging-promoter'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete staging promoter branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "üßπ Deleting remote branch staging-promoter if present..."
          if git ls-remote --heads origin staging-promoter | grep -q 'refs/heads/staging-promoter'; then
            git push origin --delete staging-promoter || true
            echo "‚úÖ Deleted remote branch staging-promoter"
          else
            echo "‚ÑπÔ∏è Remote branch staging-promoter not found; skipping"
          fi
