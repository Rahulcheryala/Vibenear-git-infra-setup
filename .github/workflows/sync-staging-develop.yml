name: Sync staging and develop
run-name: Sync develop after PR merge to staging

on:
  pull_request:
    types: [closed]
    branches:
      - staging

permissions:
  contents: write

concurrency:
  group: sync-develop-after-staging-merge
  cancel-in-progress: false

jobs:
  merge-staging-into-develop:
    name: Merge staging into develop after PR merge
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Smart sync staging to develop
        env:
          GITHUB_TOKEN: ${{ secrets.BYPASS_TOKEN || secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          set -euo pipefail

          echo "üîç Verifying token is available..."
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "‚ùå No token available!"
            exit 1
          fi
          echo "‚úÖ Token is configured"

          echo "üîç Fetching latest develop and staging..."
          git fetch origin develop:origin-develop staging:origin-staging

          echo "üîß Configure git for merge commit..."
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          echo "üîÑ Ensuring we're on latest develop..."
          git checkout develop
          git reset --hard origin-develop

          # Smart sync logic: Only sync when staging is ahead of develop
          echo "üîç Checking if sync is needed..."
          # Check if staging has commits that develop doesn't have
          STAGING_AHEAD=$(git rev-list --count HEAD..origin-staging)
          DEVELOP_AHEAD=$(git rev-list --count origin-staging..HEAD)
          echo "üìä Branch status:"
          echo "  ‚Ä¢ Staging ahead of develop: $STAGING_AHEAD commits"
          echo "  ‚Ä¢ Develop ahead of staging: $DEVELOP_AHEAD commits"

          if [ "$STAGING_AHEAD" -eq 0 ]; then
            echo "‚úÖ Staging and develop are in sync - no sync needed!"
            echo "üéØ This eliminates unnecessary sync commits in develop branch"
            exit 0
          fi

          if [ "$DEVELOP_AHEAD" -eq 0 ]; then
            echo "‚úÖ Fast-forward merge possible - no sync commit needed!"
            echo "üéØ This eliminates unnecessary sync commits in develop branch"
            git merge --ff-only origin-staging
            echo "‚úÖ Fast-forward merge completed"
          else
            echo "üîÄ Branches have diverged - creating empty sync commit..."
            echo "‚ÑπÔ∏è  Creating empty commit to record staging SHA without merge history"
            echo "üìù This prevents GitHub from expanding staging commits in develop PRs"

            # Get the current staging SHA
            STAGING_SHA=$(git rev-parse origin-staging)
            echo "üìã Staging SHA: ${STAGING_SHA:0:7}"

            # Create empty commit with staging SHA in message
            git commit --allow-empty -m "Sync: staging@${STAGING_SHA:0:7} after PR #${PR_NUMBER}

            # This empty commit marks the sync point between develop and staging.
            echo "Develop remains at: $(git rev-parse HEAD)"
            echo "‚úÖ Empty sync commit created"
          fi

          echo "‚¨ÜÔ∏è Pushing develop to remote..."
          # The token from actions/checkout should already be configured, but let's be explicit
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git develop
          echo "‚úÖ Staging successfully synced to develop!"

  delete-promoter-branch:
    name: Delete promoter branch after PR merge to staging
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'staging-promoter'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete promoter branch staging-promoter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "üßπ Deleting remote branch staging-promoter if present..."
          if git ls-remote --heads origin staging-promoter | grep -q 'refs/heads/staging-promoter'; then
            git push origin --delete staging-promoter || true
            echo "‚úÖ Deleted remote branch staging-promoter"
          else
            echo "‚ÑπÔ∏è Remote branch staging-promoter not found; skipping"
          fi
