name: Auto Promote to Production

on:
  workflow_dispatch:
    inputs:
      create_pr:
        description: "Create PR from staging to main for production deployment"
        required: true
        default: true
        type: boolean
      release_notes:
        description: "Release notes for this production deployment"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1: Analyze Staging Commits
  commit-analysis:
    name: Commit Analysis
    runs-on: ubuntu-latest
    outputs:
      promotion_needed: ${{ steps.analyze.outputs.promotion_needed }}
      commit_count: ${{ steps.analyze.outputs.commit_count }}
      release_tag: ${{ steps.analyze.outputs.release_tag }}
      timestamp: ${{ steps.analyze.outputs.timestamp }}
      new_commits: ${{ steps.analyze.outputs.new_commits }}
      existing_pr: ${{ steps.analyze.outputs.existing_pr }}

    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch main branch and tags
        run: |
          echo "üì• Fetching main branch for comparison..."
          git fetch origin main:origin-main --tags
          echo "‚úÖ Main branch fetched successfully"

      - name: Analyze staging commits for production promotion
        id: analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "üîç Ensuring we have up-to-date main and tags..."
          git fetch origin main:origin-main --tags

          echo "üîç Checking for content differences (tree comparison)..."
          if git diff --quiet origin-main..HEAD; then
            echo "‚úÖ Staging and main have identical content (squash/rebase scenario handled)"
            echo "promotion_needed=false" >> "$GITHUB_OUTPUT"
            echo "commit_count=0" >> "$GITHUB_OUTPUT"
            echo "release_tag=" >> "$GITHUB_OUTPUT"
            echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')" >> "$GITHUB_OUTPUT"
            echo "existing_pr=" >> "$GITHUB_OUTPUT"
            echo "new_commits=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "üîç Using patch-id comparison to exclude changes already present on main..."
          # git cherry marks commits by content: "+" = new (not in main), "-" = already in main
          CHERRY_OUTPUT="$(git cherry -v origin-main HEAD || true)"

          # Build a human-readable list: "<shortsha> <subject>" for "+" commits only
          NEW_COMMITS="$(printf "%s\n" "$CHERRY_OUTPUT" \
            | awk '$1=="+" { printf "%s ", substr($2,1,7); for (i=3;i<=NF;i++){ printf "%s%s", $i, (i<NF?" ":"") } print "" }')"

          # Count "+" commits
          COMMIT_COUNT="$(printf "%s\n" "$CHERRY_OUTPUT" | awk '$1=="+" { c++ } END { print c+0 }')"

          if [ "$COMMIT_COUNT" -eq 0 ]; then
            echo "‚úÖ No new changes (by content) to promote"
            echo "promotion_needed=false" >> "$GITHUB_OUTPUT"
            echo "commit_count=0" >> "$GITHUB_OUTPUT"
            echo "release_tag=" >> "$GITHUB_OUTPUT"
            echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')" >> "$GITHUB_OUTPUT"
            echo "existing_pr=" >> "$GITHUB_OUTPUT"
            echo "new_commits=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "üîç Checking for existing auto-promotion PRs..."
          # Filter for branches starting with auto/production-promotion-
          EXISTING_AUTO_PR="$(gh pr list --base main --state open --json number,headRefName \
            --jq '[.[] | select(.headRefName | startswith("auto/production-promotion-"))][0].number' || true)"

          if [ -n "${EXISTING_AUTO_PR:-}" ] && [ "${EXISTING_AUTO_PR}" != "null" ]; then
            echo "‚ö†Ô∏è Auto-promotion PR #${EXISTING_AUTO_PR} already exists"
            echo "promotion_needed=false" >> "$GITHUB_OUTPUT"
            echo "existing_pr=${EXISTING_AUTO_PR}" >> "$GITHUB_OUTPUT"
            echo "commit_count=0" >> "$GITHUB_OUTPUT"
            echo "release_tag=" >> "$GITHUB_OUTPUT"
            echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')" >> "$GITHUB_OUTPUT"
            echo "new_commits=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          TIMESTAMP="$(date +'%d/%m/%Y %H:%M:%S UTC')"
          RELEASE_TAG="release_$(date +'%d-%m-%Y_%H.%M.%S')"

          echo "üìä Analysis Results:"
          echo "  ‚Ä¢ Commits to promote (content not yet on main): $COMMIT_COUNT"
          echo "  ‚Ä¢ Release tag: $RELEASE_TAG"
          echo "  ‚Ä¢ Timestamp: $TIMESTAMP"
          echo ""
          echo "üìù Commits to be promoted to production:"
          printf "%s\n" "$NEW_COMMITS"
          echo ""

          # Set outputs
          echo "promotion_needed=true" >> "$GITHUB_OUTPUT"
          echo "commit_count=$COMMIT_COUNT" >> "$GITHUB_OUTPUT"
          echo "release_tag=$RELEASE_TAG" >> "$GITHUB_OUTPUT"
          echo "timestamp=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          echo "existing_pr=" >> "$GITHUB_OUTPUT"
          {
            echo "new_commits<<EOF"
            printf "%s\n" "$NEW_COMMITS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  # Job 2: Create Production Promotion PR
  create-pr:
    name: Create Production PR
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true' && inputs.create_pr
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
      pr_url: ${{ steps.create_pr.outputs.pr_url }}

    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure full fetch
        run: git fetch --all --prune --tags

      - name: Create PR body file
        id: body
        run: |
          cat > PR_BODY.md <<'BODY'
          ## üöÄ Production Deployment

          This PR promotes the staging environment to production.

          ### üìã Release Information
          - **Release Tag**: `${{ needs.commit-analysis.outputs.release_tag }}`
          - **Timestamp**: ${{ needs.commit-analysis.outputs.timestamp }}
          - **Commit Count**: ${{ needs.commit-analysis.outputs.commit_count }} commits
          - **Source**: `staging`
          - **Target**: `main`
          - **Triggered By**: @${{ github.actor }} via manual workflow dispatch

          ### üìù Commits to be Deployed
          ```text
          ${{ needs.commit-analysis.outputs.new_commits }}
          ```

          ### üìí Release Notes
          ${{ inputs.release_notes }}

          ### üîÑ What Happens on Merge
          1. Squash merge into a single release commit
          2. Tag `${{ needs.commit-analysis.outputs.release_tag }}` will be created (already pushed)
          3. Production deployment triggered
          4. Clean history: one commit per production release

          ### ‚ö†Ô∏è Important
          - Deploys to **PRODUCTION**
          - Rollback = revert the single release commit
          - Ensure all staging validations are complete

          ### ‚úÖ Pre-deployment Checklist
          - [ ] Staging tests passed
          - [ ] Code review complete
          - [ ] DB migrations verified
          - [ ] Release notes reviewed

          ---
          üîí Requires multiple approvals.

          üë• Reviewers: @rahulcheryala @your-senior-dev
          BODY

      - name: Create branch from staging and push
        run: |
          set -euo pipefail
          BR="auto/production-promotion-${{ github.run_number }}"
          echo "üîß Creating branch $BR from staging HEAD"
          git checkout -B "$BR" HEAD
          git push -u origin "$BR" --force

      - name: Create PR via gh
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          BR="auto/production-promotion-${{ github.run_number }}"
          TITLE="üöÄ Production Release: ${{ needs.commit-analysis.outputs.release_tag }}"
          if [ -z "$TITLE" ] || [ "$TITLE" = "üöÄ Production Release: " ]; then
            TITLE="üöÄ Production Release"
          fi

          REPO="${GITHUB_REPOSITORY}"

          echo "üìù Creating PR base=main head=${BR}"

          # If a PR for this head branch already exists, reuse it
          if gh pr view --base main --head "$BR" --json number,url >/dev/null 2>&1; then
            echo "‚ÑπÔ∏è PR already exists for ${BR}. Fetching..."
            PR_NUMBER="$(gh pr view --base main --head "$BR" --json number --jq .number)"
            PR_URL="$(gh pr view --base main --head "$BR" --json url --jq .url)"
          else
            # Create the PR via REST API to avoid gh pr create --json incompatibility
            # Body comes from the file you prepared earlier (PR_BODY.md)
            BODY_CONTENT="$(cat PR_BODY.md)"

            echo "üîß Creating PR via gh api..."
            PR_NUMBER="$(gh api -X POST "repos/${REPO}/pulls" \
              -f title="$TITLE" \
              -f head="$BR" \
              -f base="main" \
              -f body="$BODY_CONTENT" \
              --jq .number)"

            PR_URL="$(gh api "repos/${REPO}/pulls/${PR_NUMBER}" --jq .html_url)"

            echo "üè∑Ô∏è Adding labels..."
            printf '{"labels":["production","deployment","release","auto-generated"]}\n' > labels.json
            gh api -X POST "repos/${REPO}/issues/${PR_NUMBER}/labels" --input labels.json >/dev/null || true

            echo "üë• Requesting reviewers..."
            printf '{"reviewers":["rahulcheryala","your-senior-dev"]}\n' > reviewers.json
            gh api -X POST "repos/${REPO}/pulls/${PR_NUMBER}/requested_reviewers" --input reviewers.json >/dev/null || true
          fi

          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
          echo "‚úÖ PR created or reused: #$PR_NUMBER ($PR_URL)"

  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true'
    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push release tag
        run: |
          set -euo pipefail
          TAG="${{ needs.commit-analysis.outputs.release_tag }}"
          echo "üè∑Ô∏è Creating release tag: $TAG"
          # Avoid error if already exists locally
          git tag -f "$TAG"
          git push -f origin "refs/tags/$TAG"
          echo "‚úÖ Tag pushed."

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [commit-analysis, create-pr, create-release-tag]
    if: always() && needs.commit-analysis.outputs.promotion_needed == 'true'
    steps:
      - name: Display workflow summary
        run: |
          echo ""
          echo "================================================"
          echo "üöÄ PRODUCTION PROMOTION WORKFLOW COMPLETED"
          echo "================================================"
          echo ""
          echo "‚úÖ Analysis complete"
          if [ "${{ needs.create-pr.result }}" = "success" ]; then
            echo "‚úÖ PR created"
          else
            echo "‚ö†Ô∏è PR not created (skipped or failed)"
          fi
          echo "‚úÖ Tag created"
          echo ""
          echo "üìã Release Details:"
          echo "  ‚Ä¢ Release Tag: ${{ needs.commit-analysis.outputs.release_tag }}"
          echo "  ‚Ä¢ Timestamp: ${{ needs.commit-analysis.outputs.timestamp }}"
          echo "  ‚Ä¢ Commit Count: ${{ needs.commit-analysis.outputs.commit_count }}"
          echo "  ‚Ä¢ PR Number: ${{ needs.create-pr.outputs.pr_number }}"
          echo ""
          echo "üîó PR Link: ${{ needs.create-pr.outputs.pr_url }}"
          echo "‚ö†Ô∏è Reminder: Merging deploys to PRODUCTION."
          echo ""
