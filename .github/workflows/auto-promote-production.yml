name: Auto Promote to Production

on:
  workflow_dispatch:
    inputs:
      create_pr:
        description: "Create PR from staging to main for production deployment"
        required: true
        default: true
        type: boolean
      release_notes:
        description: "Release notes for this production deployment"
        required: false
        default: ""
        type: string

jobs:
  # Job 1: Analyze Staging Commits
  commit-analysis:
    name: Commit Analysis
    runs-on: ubuntu-latest
    outputs:
      promotion_needed: ${{ steps.analyze.outputs.promotion_needed }}
      commit_count: ${{ steps.analyze.outputs.commit_count }}
      release_tag: ${{ steps.analyze.outputs.release_tag }}
      timestamp: ${{ steps.analyze.outputs.timestamp }}
      new_commits: ${{ steps.analyze.outputs.new_commits }}
      existing_pr: ${{ steps.analyze.outputs.existing_pr }}

    steps:
      - name: Checkout staging and main branches
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch main branch
        run: |
          echo "üì• Fetching main branch for comparison..."
          git fetch origin main:main
          echo "‚úÖ Main branch fetched successfully"

      - name: Analyze staging commits for production promotion
        id: analyze
        run: |
          echo "üîç Analyzing commits in staging branch that are not in main..."

          # Check if there are new commits in staging that are not in main
          NEW_COMMITS=$(git log main..staging --oneline --no-merges)

          if [ -z "$NEW_COMMITS" ]; then
            echo "‚úÖ No new commits found in staging branch"
            echo "üìã Staging and main branches are in sync"
            echo "promotion_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if there's already an open PR from staging to main
          echo "üîç Checking for existing PRs from staging to main..."
          EXISTING_PR=$(gh pr list --base main --head staging --state open --json number --jq '.[0].number')

          if [ ! -z "$EXISTING_PR" ] && [ "$EXISTING_PR" != "null" ]; then
            echo "‚ö†Ô∏è PR #$EXISTING_PR already exists from staging to main"
            echo "promotion_needed=false" >> $GITHUB_OUTPUT
            echo "existing_pr=$EXISTING_PR" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Count commits and generate release info
          COMMIT_COUNT=$(echo "$NEW_COMMITS" | wc -l)
          TIMESTAMP=$(date +'%d/%m/%Y %H:%M:%S UTC')
          RELEASE_TAG="release_$(date +'%d-%m-%Y_%H.%M.%S')"

          echo "üìä Analysis Results:"
          echo "  ‚Ä¢ Commits to promote: $COMMIT_COUNT"
          echo "  ‚Ä¢ Release tag: $RELEASE_TAG"
          echo "  ‚Ä¢ Timestamp: $TIMESTAMP"
          echo ""
          echo "üìù Commits to be promoted to production:"
          echo "$NEW_COMMITS"
          echo ""

          # Set outputs
          echo "promotion_needed=true" >> $GITHUB_OUTPUT
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "existing_pr=" >> $GITHUB_OUTPUT

          echo "new_commits<<EOF" >> $GITHUB_OUTPUT
          echo "$NEW_COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Job 2: Create Production Promotion PR
  create-pr:
    name: Create Production PR
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true' && inputs.create_pr == true
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}

    steps:
      - name: Create production promotion PR
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: auto/production-promotion-${{ github.run_number }}
          base: main
          env:
            RELEASE_TAG: ${{ steps.check_production_promotion.outputs.release_tag }}
            TIMESTAMP: ${{ steps.check_production_promotion.outputs.timestamp }}
            COMMIT_COUNT: ${{ steps.check_production_promotion.outputs.commit_count }}
            NEW_COMMITS: ${{ steps.check_production_promotion.outputs.new_commits }}
          title: "üöÄ Production Release: $RELEASE_TAG"
          body: |
            ## üöÄ Production Deployment

            This PR promotes the staging environment to production.

            ### üìã Release Information:

            - **Release Tag**: `$RELEASE_TAG`
            - **Timestamp**: $TIMESTAMP
            - **Commit Count**: $COMMIT_COUNT commits
            - **Source**: `staging` branch
            - **Target**: `main` branch (production)
            - **Triggered By**: ${{ github.actor }} via manual workflow dispatch

            ### üìù Commits to be Deployed:

            ```bash
            $NEW_COMMITS
            ```

            ### üîÑ What Happens on Merge:

            1. **GitHub Squash Merge**: All commits will be automatically squashed into a single release commit
            2. **Release Tag**: Tag `$RELEASE_TAG` will be created
            3. **Production Deployment**: Automatic deployment to production environment
            4. **Clean History**: Production history will contain one commit per release

            ### üìã Release Notes:

            $RELEASE_NOTES

            ### ‚ö†Ô∏è Important Notes:

            - This will deploy to **PRODUCTION** environment
            - All changes will be squashed into a single commit for clean history
            - Rollback will be possible by reverting the single release commit
            - Ensure all staging tests have passed before merging
            - This PR requires **multiple approvals** before merging

            ### üîç Pre-deployment Checklist:

            - [ ] All staging tests have passed
            - [ ] Code review completed
            - [ ] Database migrations tested
            - [ ] Release notes reviewed

            ---

            **üîí Production Deployment**: This PR requires **multiple approvals** before merging.

            **üë• Auto-assigned Reviewers**: @rahulcheryala @your-senior-dev
          labels: |
            production
            deployment
            release
            auto-generated
          reviewers: |
            rahulcheryala
            your-senior-dev

      - name: Get PR number
        run: |
          echo "üîó Getting created PR number..."
          PR_NUMBER=$(gh pr list --base main --head auto/production-promotion-${{ github.run_number }} --state open --json number --jq '.[0].number')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "üìã Created PR #$PR_NUMBER"

  # Job 3: Post Release Tag
  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true'

    steps:
      - name: Checkout staging branch
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push release tag
        env:
          RELEASE_TAG: ${{ needs.commit-analysis.outputs.release_tag }}
        run: |
          echo "üè∑Ô∏è Creating release tag for production deployment..."
          echo "üìã Release tag: $RELEASE_TAG"
          echo ""

          # Create and push the release tag
          git tag "$RELEASE_TAG"
          git push origin "$RELEASE_TAG"

          echo "‚úÖ Release tag created and pushed successfully: $RELEASE_TAG"
          echo "üìã Tag will be used for production deployment tracking"

  # Job 4: Notification and Summary
  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [commit-analysis, create-pr, create-release-tag]
    if: always() && needs.commit-analysis.outputs.promotion_needed == 'true'

    steps:
      - name: Display workflow summary
        run: |
          echo ""
          echo "================================================"
          echo "üöÄ PRODUCTION PROMOTION WORKFLOW COMPLETED"
          echo "================================================"
          echo ""
          echo "‚úÖ Analysis: Staging commits analyzed successfully"
          echo "‚úÖ PR Creation: Production promotion PR created"
          echo "‚úÖ Tagging: Release tag created and pushed"
          echo ""
          echo "üìã Release Details:"
          echo "  ‚Ä¢ Release Tag: ${{ needs.commit-analysis.outputs.release_tag }}"
          echo "  ‚Ä¢ Timestamp: ${{ needs.commit-analysis.outputs.timestamp }}"
          echo "  ‚Ä¢ Commit Count: ${{ needs.commit-analysis.outputs.commit_count }}"
          echo "  ‚Ä¢ PR Number: ${{ needs.create-pr.outputs.pr_number }}"
          echo ""
          echo "üìã Next Steps:"
          echo "  1. Review the production promotion PR"
          echo "  2. Complete code review and approvals"
          echo "  3. Run final staging tests"
          echo "  4. Merge PR to deploy to production"
          echo "  5. Monitor production deployment"
          echo ""
          echo "üîó PR Link: https://github.com/${{ github.repository }}/pull/${{ needs.create-pr.outputs.pr_number }}"
          echo "‚ö†Ô∏è Remember: This will deploy to PRODUCTION environment!"
          echo ""
