name: Auto Promote to Production

on:
  workflow_dispatch:
    inputs:
      create_pr:
        description: "Create PR from staging to main for production deployment"
        required: true
        default: true
        type: boolean
      release_notes:
        description: "Release notes for this production deployment"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1: Analyze Staging Commits
  commit-analysis:
    name: Commit Analysis
    runs-on: ubuntu-latest
    outputs:
      promotion_needed: ${{ steps.analyze.outputs.promotion_needed }}
      commit_count: ${{ steps.analyze.outputs.commit_count }}
      release_tag: ${{ steps.analyze.outputs.release_tag }}
      timestamp: ${{ steps.analyze.outputs.timestamp }}
      new_commits: ${{ steps.analyze.outputs.new_commits }}
      existing_pr: ${{ steps.analyze.outputs.existing_pr }}

    steps:
      - name: Checkout staging and main branches
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch main branch
        run: |
          echo "📥 Fetching main branch for comparison..."
          git fetch origin main:main
          echo "✅ Main branch fetched successfully"

      - name: Analyze staging commits for production promotion
        id: analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "🔍 Ensuring we have main..."
          git fetch origin main:origin-main

          echo "🔍 Checking for content differences (tree comparison)..."
          if git diff --quiet origin-main..HEAD; then
            echo "✅ Staging and main have identical content (after squash merge scenario)"
            echo "promotion_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "📝 Collecting commits present in staging not in main (may include previously squashed ones if staging not reset)..."
          NEW_COMMITS=$(git log origin-main..HEAD --oneline --no-merges)

          # Check if there's already an open auto-promotion PR
          echo "🔍 Checking for existing auto-promotion PRs..."
          EXISTING_AUTO_PR=$(gh pr list --base main --head "auto/production-promotion-*" --state open --json number --jq '.[0].number')

          if [ -n "$EXISTING_AUTO_PR" ] && [ "$EXISTING_AUTO_PR" != "null" ]; then
            echo "⚠️ Auto-promotion PR #$EXISTING_AUTO_PR already exists"
            echo "promotion_needed=false" >> $GITHUB_OUTPUT
            echo "existing_pr=$EXISTING_AUTO_PR" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check for direct staging→main PR (informational only)
          EXISTING_STAGING_PR=$(gh pr list --base main --head staging --state open --json number --jq '.[0].number')
          if [ -n "$EXISTING_STAGING_PR" ] && [ "$EXISTING_STAGING_PR" != "null" ]; then
            echo "Note: Direct staging→main PR #$EXISTING_STAGING_PR exists (will not block auto-promotion)"
          fi

          # Count commits and generate release info
          COMMIT_COUNT=$(echo "$NEW_COMMITS" | wc -l)
          TIMESTAMP=$(date +'%d/%m/%Y %H:%M:%S UTC')
          RELEASE_TAG="release_$(date +'%d-%m-%Y_%H.%M.%S')"

          echo "📊 Analysis Results:"
          echo "  • Commits to promote: $COMMIT_COUNT"
          echo "  • Release tag: $RELEASE_TAG"
          echo "  • Timestamp: $TIMESTAMP"
          echo ""
          echo "📝 Commits to be promoted to production:"
          echo "$NEW_COMMITS"
          echo ""

          echo "promotion_needed=${{ steps.analyze.outputs.promotion_needed }}"
          echo "existing_pr=${{ steps.analyze.outputs.existing_pr }}"
          echo "commit_count=${{ steps.analyze.outputs.commit_count }}"

          # Set outputs
          echo "promotion_needed=true" >> $GITHUB_OUTPUT
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "existing_pr=" >> $GITHUB_OUTPUT

          {
            echo "new_commits<<EOF"
            echo "$NEW_COMMITS"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  # Job 2: Create Production Promotion PR
  create-pr:
    name: Create Production PR
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true' && inputs.create_pr
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}

    steps:
      - name: Checkout staging (for diff context if needed)
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure full fetch
        run: |
          echo "🔄 Ensuring full fetch of all branches..."
          git fetch --all --prune
          echo "✅ Full fetch completed"

      - name: Create production promotion PR
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: auto/production-promotion-${{ github.run_number }}
          base: main
          title: "🚀 Production Release: ${{ needs.commit-analysis.outputs.release_tag }}"
          body: |
            ## 🚀 Production Deployment

            This PR promotes the staging environment to production.

            ### 📋 Release Information:

            - **Release Tag**: `$RELEASE_TAG`
            - **Timestamp**: ${{ needs.commit-analysis.outputs.timestamp }}
            - **Commit Count**: ${{ needs.commit-analysis.outputs.commit_count }} commits
            - **Source**: `staging` branch
            - **Target**: `main` branch (production)
            - **Triggered By**: ${{ github.actor }} via manual workflow dispatch

            ### 📝 Commits to be Deployed:
            ```bash
            ${{ needs.commit-analysis.outputs.new_commits }}
            ```

            ### 📋 Release Notes:
            ${{ needs.commit-analysis.outputs.release_notes }}

            ### 🔄 What Happens on Merge:
            1. **GitHub Squash Merge**: Squash merge into a single release commit
            2. **Release Tag**: Tag `${{ needs.commit-analysis.outputs.release_tag }}` will be created (already pushed)
            3. **Production Deployment**: Automatic deployment to production environment
            4. **Clean History**: Production history will contain one commit per release


            ### ⚠️ Important Notes:
            - This will deploy to **PRODUCTION** environment
            - Rollback will be possible by reverting the single release commit
            - Ensure all staging validations are complete before merging

            ### 🔍 Pre-deployment Checklist:
            - [ ] Manual QA testing completed
            - [ ] Code review completed
            - [ ] Database migrations tested
            - [ ] Release notes reviewed

            ---

            **🔒 Production Deployment**: This PR requires **multiple approvals** before merging.

            **👥 Reviewers**: @rahulcheryala @your-senior-dev
          labels: |
            production
            deployment
            release
            auto-generated
          reviewers: |
            rahulcheryala
            your-senior-dev

      - name: Debug create-pr outputs
        if: always()
        run: |
          echo "🔍 Debugging create-pr action outputs:"
          echo "  • pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}"
          echo "  • pull-request-url: ${{ steps.create_pr.outputs.pull-request-url }}"
          echo "  • pull-request-operation: ${{ steps.create_pr.outputs.pull-request-operation }}"
          echo "  • skipped: ${{ steps.create_pr.outputs.skipped }}"

      - name: Get PR number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔗 Getting created PR number..."
          PR_NUMBER=$(gh pr list --base main --head auto/production-promotion-${{ github.run_number }} --state open --json number --jq '.[0].number')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "📋 Created PR #$PR_NUMBER"

  # Job 3: Post Release Tag
  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true'

    steps:
      - name: Checkout staging branch
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push release tag
        run: |
          echo "🏷️ Creating release tag for production deployment..."
          echo "📋 Release tag: ${{ needs.commit-analysis.outputs.release_tag }}"
          echo ""

          # Create and push the release tag
          git tag "${{ needs.commit-analysis.outputs.release_tag }}"
          git push origin "${{ needs.commit-analysis.outputs.release_tag }}"

          echo "✅ Release tag created and pushed successfully: ${{ needs.commit-analysis.outputs.release_tag }}"
          echo "📋 Tag will be used for production deployment tracking"

  # Job 4: Notification and Summary
  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [commit-analysis, create-pr, create-release-tag]
    if: always() && needs.commit-analysis.outputs.promotion_needed == 'true'

    steps:
      - name: Display workflow summary
        run: |
          echo ""
          echo "================================================"
          echo "🚀 PRODUCTION PROMOTION WORKFLOW COMPLETED"
          echo "================================================"
          echo ""
          echo "✅ Analysis: Staging commits analyzed successfully"
          echo "✅ PR Creation: Production promotion PR created"
          echo "✅ Tagging: Release tag created and pushed"
          echo ""
          echo "📋 Release Details:"
          echo "  • Release Tag: ${{ needs.commit-analysis.outputs.release_tag }}"
          echo "  • Timestamp: ${{ needs.commit-analysis.outputs.timestamp }}"
          echo "  • Commit Count: ${{ needs.commit-analysis.outputs.commit_count }}"
          echo "  • PR Number: ${{ needs.create-pr.outputs.pr_number }}"
          echo ""
          echo "🔗 PR Link: https://github.com/${{ github.repository }}/pull/${{ needs.create-pr.outputs.pr_number }}"
          echo "⚠️ Remember: Merging deploys to PRODUCTION."
          echo ""
