name: Production Release
run-name: Production Release by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      create_pr:
        description: "Create PR from staging to main for production deployment"
        required: true
        default: true
        type: boolean
      release_notes:
        description: "Release notes for prod deployment"
        required: false
        default: ""
        type: string

description: |
  Manually triggered workflow to create or update a Pull Request from `staging` to `main`
  for production deployment, including release tag creation and detailed PR messaging.

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1: Analyze Staging Commits
  commit-analysis:
    name: Commit Analysis
    runs-on: ubuntu-latest
    outputs:
      promotion_needed: ${{ steps.analyze.outputs.promotion_needed }}
      commit_count: ${{ steps.analyze.outputs.commit_count }}
      release_tag: ${{ steps.analyze.outputs.release_tag }}
      timestamp: ${{ steps.analyze.outputs.timestamp }}
      new_commits: ${{ steps.analyze.outputs.new_commits }}
      existing_pr: ${{ steps.analyze.outputs.existing_pr }}

    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch main branch and tags
        run: |
          echo "📥 Fetching main branch for comparison..."
          git fetch origin main:origin-main --tags
          echo "✅ Main branch fetched successfully"

      - name: Analyze staging commits for production promotion
        id: analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "🔍 Ensuring we have up-to-date main and tags..."
          git fetch origin main:origin-main --tags

          echo "🔍 Checking for content differences (tree comparison)..."
          if git diff --quiet origin-main..HEAD; then
            echo "✅ Staging and main have identical content"
            echo "promotion_needed=false" >> "$GITHUB_OUTPUT"
            echo "commit_count=0" >> "$GITHUB_OUTPUT"
            echo "release_tag=" >> "$GITHUB_OUTPUT"
            echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')" >> "$GITHUB_OUTPUT"
            echo "existing_pr=" >> "$GITHUB_OUTPUT"
            echo "new_commits=" >> "$GITHUB_OUTPUT"
            echo "shas_to_pick=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "🔎 Finding last release tag (release_*)..."
          LAST_RELEASE_TAG="$(git tag --list 'release_*' --sort=-creatordate | head -n1 || true)"
          if [ -n "${LAST_RELEASE_TAG:-}" ]; then
            echo "ℹ️ Using commits since ${LAST_RELEASE_TAG}"
            LOG_RANGE="${LAST_RELEASE_TAG}..HEAD"
          else
            echo "ℹ️ No prior release_* tag; using origin-main..HEAD"
            LOG_RANGE="origin-main..HEAD"
          fi

          # Human-readable commit list for PR body
          NEW_COMMITS="$(git log "$LOG_RANGE" --oneline --no-merges || true)"
          # SHAs to cherry-pick (oldest first) for a clean PR branch off main
          SHAS_TO_PICK="$(git log "$LOG_RANGE" --no-merges --reverse --format=%H || true)"

          # Count human-readable commits
          COMMIT_COUNT="$(printf "%s\n" "$NEW_COMMITS" | sed '/^$/d' | wc -l | tr -d ' ')"

          if [ "$COMMIT_COUNT" -eq 0 ]; then
            echo "✅ No new commits to promote in selected range"
            echo "promotion_needed=false" >> "$GITHUB_OUTPUT"
            echo "commit_count=0" >> "$GITHUB_OUTPUT"
            echo "release_tag=" >> "$GITHUB_OUTPUT"
            echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')" >> "$GITHUB_OUTPUT"
            echo "existing_pr=" >> "$GITHUB_OUTPUT"
            echo "new_commits=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "🔍 Checking for existing staging→main PR..."
          EXISTING_STAGING_PR="$(gh pr list --base main --head staging --state open --json number --jq '.[0].number' || true)"

          if [ -n "${EXISTING_STAGING_PR:-}" ] && [ "${EXISTING_STAGING_PR}" != "null" ]; then
            echo "ℹ️ Staging→main PR #${EXISTING_STAGING_PR} already exists - will reuse it"
            echo "promotion_needed=true" >> "$GITHUB_OUTPUT"
            echo "existing_pr=${EXISTING_STAGING_PR}" >> "$GITHUB_OUTPUT"
          else
            echo "promotion_needed=true" >> "$GITHUB_OUTPUT"
            echo "existing_pr=" >> "$GITHUB_OUTPUT"
          fi

          TIMESTAMP="$(date +'%d/%m/%Y %H:%M:%S UTC')"
          RELEASE_TAG="release_$(date +'%d-%m-%Y_%H.%M.%S')"

          echo "📊 Analysis Results:"
          echo "  • Commits to promote (content not yet on main): $COMMIT_COUNT"
          echo "  • Release tag: $RELEASE_TAG"
          echo "  • Timestamp: $TIMESTAMP"
          echo ""
          echo "📝 Commits to be promoted to production:"
          printf "%s\n" "$NEW_COMMITS"
          echo ""

          # Set outputs (preserve existing_pr value from above)
          echo "promotion_needed=true" >> "$GITHUB_OUTPUT"
          echo "commit_count=$COMMIT_COUNT" >> "$GITHUB_OUTPUT"
          echo "release_tag=$RELEASE_TAG" >> "$GITHUB_OUTPUT"
          echo "timestamp=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          {
            echo "new_commits<<EOF"
            printf "%s\n" "$NEW_COMMITS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  # Job 2: Create Production Promotion PR
  create-pr:
    name: Create Production PR
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true' && inputs.create_pr
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
      pr_url: ${{ steps.create_pr.outputs.pr_url }}

    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure full fetch
        run: git fetch --all --prune --tags

      - name: Create or reuse PR from staging to main
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          TITLE="🚀 Production Release: ${{ needs.commit-analysis.outputs.release_tag }}"
          if [ -z "$TITLE" ] || [ "$TITLE" = "🚀 Production Release: " ]; then
            TITLE="🚀 Production Release"
          fi

          REPO="${GITHUB_REPOSITORY}"

          BODY_CONTENT="## 🚀 Production Deployment

          This PR promotes the staging environment to production.

          ### 📋 Release Information
          - **Release Tag**: \`${{ needs.commit-analysis.outputs.release_tag }}\`
          - **Timestamp**: ${{ needs.commit-analysis.outputs.timestamp }}
          - **Commit Count**: ${{ needs.commit-analysis.outputs.commit_count }} commits
          - **Source**: \`staging\`
          - **Target**: \`main\`
          - **Triggered By**: @${{ github.actor }} via manual workflow dispatch

          ### 📝 Features to be Deployed
          \`\`\`text
          ${{ needs.commit-analysis.outputs.new_commits }}
          \`\`\`

          ### 📒 Release Notes
          ${{ inputs.release_notes }}

          ### 🔄 What Happens on Merge
          1. Squash merge into a single release commit
          2. Tag \`${{ needs.commit-analysis.outputs.release_tag }}\` will be created (already pushed)
          3. Production deployment triggered
          4. Clean history: one commit per production release

          ### ⚠️ Important
          - Deploys to **PRODUCTION**
          - Rollback = revert the single release commit
          - Ensure all staging validations are complete

          ### ✅ Pre-deployment Checklist
          - [ ] Staging tests passed
          - [ ] Code review complete
          - [ ] DB migrations verified
          - [ ] Release notes reviewed

          ---
          🔒 Requires multiple approvals.

          👥 Reviewers: @rahulcheryala @your-senior-dev"

          echo "📝 Ensuring PR base=main head=staging"

          # 1) Reuse PR discovered in analysis, if present, and UPDATE it
          if [ -n "${{ needs.commit-analysis.outputs.existing_pr }}" ]; then
            PR_NUMBER="${{ needs.commit-analysis.outputs.existing_pr }}"
            echo "✅ Reusing existing PR #$PR_NUMBER — updating title/body with latest analysis..."
            gh api -X PATCH "repos/${REPO}/pulls/${PR_NUMBER}" \
              -f title="$TITLE" \
              -f body="$BODY_CONTENT" >/dev/null

            # Best-effort labels/reviewers (idempotent)
            printf '{"labels":["production","deployment","release","auto-generated"]}\n' > labels.json
            gh api -X POST "repos/${REPO}/issues/${PR_NUMBER}/labels" --input labels.json >/dev/null || true
            printf '{"reviewers":["rahulcheryala","your-senior-dev"]}\n' > reviewers.json
            gh api -X POST "repos/${REPO}/pulls/${PR_NUMBER}/requested_reviewers" --input reviewers.json >/dev/null || true

            PR_URL="$(gh pr view "$PR_NUMBER" --json url --jq .url)"
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
            echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
            echo "🔗 PR Link: $PR_URL"
            exit 0
          fi

          # 2) Detect existing open PR and UPDATE it
          EXISTING_NUMBER="$(gh pr list --base main --head staging --state open --json number --jq '.[0].number' || true)"
          if [ -n "${EXISTING_NUMBER:-}" ] && [ "${EXISTING_NUMBER}" != "null" ]; then
            PR_NUMBER="$EXISTING_NUMBER"
            echo "✅ Reusing existing PR #$PR_NUMBER — updating title/body with latest analysis..."
            gh api -X PATCH "repos/${REPO}/pulls/${PR_NUMBER}" \
              -f title="$TITLE" \
              -f body="$BODY_CONTENT" >/dev/null

            # Best-effort labels/reviewers (idempotent)
            printf '{"labels":["production","deployment","release","auto-generated"]}\n' > labels.json
            gh api -X POST "repos/${REPO}/issues/${PR_NUMBER}/labels" --input labels.json >/dev/null || true
            printf '{"reviewers":["rahulcheryala","your-senior-dev"]}\n' > reviewers.json
            gh api -X POST "repos/${REPO}/pulls/${PR_NUMBER}/requested_reviewers" --input reviewers.json >/dev/null || true

            PR_URL="$(gh pr view "$PR_NUMBER" --json url --jq .url)"
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
            echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
            echo "🔗 PR Link: $PR_URL"
            exit 0
          fi

          # 3) Create PR if none exists
          echo "🔧 Creating PR via gh api..."
          set +e
          CREATE_OUT="$(gh api -X POST "repos/${REPO}/pulls" \
            -f title="$TITLE" \
            -f head="staging" \
            -f base="main" \
            -f body="$BODY_CONTENT" \
            --jq .number 2>&1)"
          STATUS=$?
          set -e

          if [ $STATUS -ne 0 ] || [ -z "$CREATE_OUT" ] || [ "$CREATE_OUT" = "null" ]; then
            echo "⚠️ PR creation failed, attempting to find existing PR (likely already open)..."
            PR_NUMBER="$(gh pr list --base main --head staging --state open --json number --jq '.[0].number' || true)"
            if [ -n "${PR_NUMBER:-}" ] && [ "${PR_NUMBER}" != "null" ]; then
              echo "✅ Reusing existing PR #$PR_NUMBER — updating title/body with latest analysis..."
              gh api -X PATCH "repos/${REPO}/pulls/${PR_NUMBER}" \
                -f title="$TITLE" \
                -f body="$BODY_CONTENT" >/dev/null
              PR_URL="$(gh pr view "$PR_NUMBER" --json url --jq .url)"
              echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
              echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
              echo "🔗 PR Link: $PR_URL"
            else
              echo "❌ Unable to create or find existing PR. Original error:"
              echo "$CREATE_OUT"
              exit 1
            fi
          else
            PR_NUMBER="$CREATE_OUT"
            PR_URL="$(gh api "repos/${REPO}/pulls/${PR_NUMBER}" --jq .html_url)"
            echo "🏷️ Adding labels..."
            printf '{"labels":["production","deployment","release","auto-generated"]}\n' > labels.json
            gh api -X POST "repos/${REPO}/issues/${PR_NUMBER}/labels" --input labels.json >/dev/null || true

            echo "👥 Requesting reviewers..."
            printf '{"reviewers":["rahulcheryala","your-senior-dev"]}\n' > reviewers.json
            gh api -X POST "repos/${REPO}/pulls/${PR_NUMBER}/requested_reviewers" --input reviewers.json >/dev/null || true

            echo "✅ PR created: #$PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
            echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
            echo "🔗 PR Link: $PR_URL"
          fi

  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true'
    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push release tag
        run: |
          set -euo pipefail
          TAG="${{ needs.commit-analysis.outputs.release_tag }}"
          echo "🏷️ Creating release tag: $TAG"
          # Avoid error if already exists locally
          git tag -f "$TAG"
          git push -f origin "refs/tags/$TAG"
          echo "✅ Tag pushed."

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [commit-analysis, create-pr, create-release-tag]
    if: always() && needs.commit-analysis.outputs.promotion_needed == 'true'
    steps:
      - name: Display workflow summary
        run: |
          echo ""
          echo "================================================"
          echo "🚀 PRODUCTION PROMOTION WORKFLOW COMPLETED"
          echo "================================================"
          echo ""
          echo "✅ Analysis complete"
          if [ "${{ needs.create-pr.result }}" = "success" ]; then
            echo "✅ PR created"
          else
            echo "⚠️ PR not created (skipped or failed)"
          fi
          echo "✅ Tag created"
          echo ""
          echo "📋 Release Details:"
          echo "  • Release Tag: ${{ needs.commit-analysis.outputs.release_tag }}"
          echo "  • Timestamp: ${{ needs.commit-analysis.outputs.timestamp }}"
          echo "  • Commit Count: ${{ needs.commit-analysis.outputs.commit_count }}"
          echo "  • PR Number: ${{ needs.create-pr.outputs.pr_number }}"
          echo ""
          echo "🔗 PR Link: ${{ needs.create-pr.outputs.pr_url }}"
          echo "⚠️ Reminder: Merging deploys to PRODUCTION."
          echo ""
