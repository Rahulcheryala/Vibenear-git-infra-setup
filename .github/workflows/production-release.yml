name: Production Release
run-name: Production Release by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Select the source branch for production promotion"
        required: true
        default: "staging"
        type: choice
        options:
          - "staging"
      release_notes:
        description: "Release notes for this production deployment"
        required: false
        default: ""
        type: string

description: |
  Manually triggered workflow to create or update a Pull Request from `staging` to `main`
  for production deployment, including release tag creation and detailed PR messaging.

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1: Analyze Staging Commits
  commit-analysis:
    name: Commit Analysis
    runs-on: ubuntu-latest
    outputs:
      promotion_needed: ${{ steps.analyze.outputs.promotion_needed }}
      commit_count: ${{ steps.analyze.outputs.commit_count }}
      release_tag: ${{ steps.analyze.outputs.release_tag }}
      timestamp: ${{ steps.analyze.outputs.timestamp }}
      new_commits: ${{ steps.analyze.outputs.new_commits }}
      existing_pr: ${{ steps.analyze.outputs.existing_pr }}

    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch main branch and tags
        run: |
          echo "üì• Fetching main branch for comparison..."
          git fetch origin main:origin-main --tags
          echo "‚úÖ Main branch fetched successfully"

      - name: Analyze staging commits for production promotion
        id: analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "üîç Ensuring we have up-to-date main and tags..."
          git fetch origin main:origin-main --tags

          echo "üîç Checking for content differences (tree comparison)..."
          if git diff --quiet origin-main..HEAD; then
            echo "‚úÖ Staging and main have identical content (squash/rebase scenario handled)"
            echo "promotion_needed=false" >> "$GITHUB_OUTPUT"
            echo "commit_count=0" >> "$GITHUB_OUTPUT"
            echo "release_tag=" >> "$GITHUB_OUTPUT"
            echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')" >> "$GITHUB_OUTPUT"
            echo "existing_pr=" >> "$GITHUB_OUTPUT"
            echo "new_commits=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "üîç Using patch-id comparison to exclude changes already present on main..."
          # git cherry marks commits by content: "+" = new (not in main), "-" = already in main
          CHERRY_OUTPUT="$(git cherry -v origin-main HEAD || true)"

          # Build a human-readable list: "<shortsha> <subject>" for "+" commits only
          NEW_COMMITS="$(printf "%s\n" "$CHERRY_OUTPUT" \
            | awk '$1=="+" { printf "%s ", substr($2,1,7); for (i=3;i<=NF;i++){ printf "%s%s", $i, (i<NF?" ":"") } print "" }')"

          # Count "+" commits
          COMMIT_COUNT="$(printf "%s\n" "$CHERRY_OUTPUT" | awk '$1=="+" { c++ } END { print c+0 }')"

          if [ "$COMMIT_COUNT" -eq 0 ]; then
            echo "‚úÖ No new changes (by content) to promote"
            echo "promotion_needed=false" >> "$GITHUB_OUTPUT"
            echo "commit_count=0" >> "$GITHUB_OUTPUT"
            echo "release_tag=" >> "$GITHUB_OUTPUT"
            echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')" >> "$GITHUB_OUTPUT"
            echo "existing_pr=" >> "$GITHUB_OUTPUT"
            echo "new_commits=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "üîç Checking for existing staging‚Üímain PR..."
          EXISTING_STAGING_PR="$(gh pr list --base main --head staging --state open --json number --jq '.[0].number' || true)"

          if [ -n "${EXISTING_STAGING_PR:-}" ] && [ "${EXISTING_STAGING_PR}" != "null" ]; then
            echo "‚ÑπÔ∏è Staging‚Üímain PR #${EXISTING_STAGING_PR} already exists - will reuse it"
            echo "promotion_needed=true" >> "$GITHUB_OUTPUT"
            echo "existing_pr=${EXISTING_STAGING_PR}" >> "$GITHUB_OUTPUT"
          else
            echo "promotion_needed=true" >> "$GITHUB_OUTPUT"
            echo "existing_pr=" >> "$GITHUB_OUTPUT"
          fi

          TIMESTAMP="$(date +'%d/%m/%Y %H:%M:%S UTC')"
          RELEASE_TAG="release_$(date +'%d-%m-%Y_%H.%M.%S')"

          echo "üìä Analysis Results:"
          echo "  ‚Ä¢ Commits to promote (content not yet on main): $COMMIT_COUNT"
          echo "  ‚Ä¢ Release tag: $RELEASE_TAG"
          echo "  ‚Ä¢ Timestamp: $TIMESTAMP"
          echo ""
          echo "üìù Commits to be promoted to production:"
          printf "%s\n" "$NEW_COMMITS"
          echo ""

          # Set outputs (preserve existing_pr value from above)
          echo "promotion_needed=true" >> "$GITHUB_OUTPUT"
          echo "commit_count=$COMMIT_COUNT" >> "$GITHUB_OUTPUT"
          echo "release_tag=$RELEASE_TAG" >> "$GITHUB_OUTPUT"
          echo "timestamp=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          {
            echo "new_commits<<EOF"
            printf "%s\n" "$NEW_COMMITS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  # Job 2: Create Production Promotion PR
  create-pr:
    name: Create Production PR
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true'
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
      pr_url: ${{ steps.create_pr.outputs.pr_url }}

    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure full fetch
        run: git fetch --all --prune --tags

      - name: Create or reuse PR from staging to main
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          TITLE="üöÄ Production Release: ${{ needs.commit-analysis.outputs.release_tag }}"
          if [ -z "$TITLE" ] || [ "$TITLE" = "üöÄ Production Release: " ]; then
            TITLE="üöÄ Production Release"
          fi

          REPO="${GITHUB_REPOSITORY}"

          BODY_CONTENT="## üöÄ Production Deployment

          This PR promotes the staging environment to production.

          ### üìã Release Information
          - **Release Tag**: \`${{ needs.commit-analysis.outputs.release_tag }}\`
          - **Timestamp**: ${{ needs.commit-analysis.outputs.timestamp }}
          - **Commit Count**: ${{ needs.commit-analysis.outputs.commit_count }} commits
          - **Source**: \`staging\`
          - **Target**: \`main\`
          - **Triggered By**: @${{ github.actor }} via manual workflow dispatch

          ### üìù Features to be Deployed
          \`\`\`text
          ${{ needs.commit-analysis.outputs.new_commits }}
          \`\`\`

          ### üìí Release Notes
          ${{ inputs.release_notes }}

          ### üîÑ What Happens on Merge
          1. Squash merge into a single release commit
          2. Tag \`${{ needs.commit-analysis.outputs.release_tag }}\` will be created (already pushed)
          3. Production deployment triggered
          4. Clean history: one commit per production release

          ### ‚ö†Ô∏è Important
          - Deploys to **PRODUCTION**
          - Rollback = revert the single release commit
          - Ensure all staging validations are complete

          ### ‚úÖ Pre-deployment Checklist
          - [ ] Staging tests passed
          - [ ] Code review complete
          - [ ] DB migrations verified
          - [ ] Release notes reviewed

          ---
          üîí Requires multiple approvals.

          üë• Reviewers: @rahulcheryala @your-senior-dev"

          echo "üìù Ensuring PR base=main head=staging"

          # 1) Reuse PR discovered in analysis, if present, and UPDATE it
          if [ -n "${{ needs.commit-analysis.outputs.existing_pr }}" ]; then
            PR_NUMBER="${{ needs.commit-analysis.outputs.existing_pr }}"
            echo "‚úÖ Reusing existing PR #$PR_NUMBER ‚Äî updating title/body with latest analysis..."
            gh api -X PATCH "repos/${REPO}/pulls/${PR_NUMBER}" \
              -f title="$TITLE" \
              -f body="$BODY_CONTENT" >/dev/null

            # Best-effort labels/reviewers (idempotent)
            printf '{"labels":["production","deployment","release","auto-generated"]}\n' > labels.json
            gh api -X POST "repos/${REPO}/issues/${PR_NUMBER}/labels" --input labels.json >/dev/null || true
            printf '{"reviewers":["rahulcheryala","your-senior-dev"]}\n' > reviewers.json
            gh api -X POST "repos/${REPO}/pulls/${PR_NUMBER}/requested_reviewers" --input reviewers.json >/dev/null || true

            PR_URL="$(gh pr view "$PR_NUMBER" --json url --jq .url)"
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
            echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
            echo "üîó PR Link: $PR_URL"
            exit 0
          fi

          # 2) Detect existing open PR and UPDATE it
          EXISTING_NUMBER="$(gh pr list --base main --head staging --state open --json number --jq '.[0].number' || true)"
          if [ -n "${EXISTING_NUMBER:-}" ] && [ "${EXISTING_NUMBER}" != "null" ]; then
            PR_NUMBER="$EXISTING_NUMBER"
            echo "‚úÖ Reusing existing PR #$PR_NUMBER ‚Äî updating title/body with latest analysis..."
            gh api -X PATCH "repos/${REPO}/pulls/${PR_NUMBER}" \
              -f title="$TITLE" \
              -f body="$BODY_CONTENT" >/dev/null

            # Best-effort labels/reviewers (idempotent)
            printf '{"labels":["production","deployment","release","auto-generated"]}\n' > labels.json
            gh api -X POST "repos/${REPO}/issues/${PR_NUMBER}/labels" --input labels.json >/dev/null || true
            printf '{"reviewers":["rahulcheryala","your-senior-dev"]}\n' > reviewers.json
            gh api -X POST "repos/${REPO}/pulls/${PR_NUMBER}/requested_reviewers" --input reviewers.json >/dev/null || true

            PR_URL="$(gh pr view "$PR_NUMBER" --json url --jq .url)"
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
            echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
            echo "üîó PR Link: $PR_URL"
            exit 0
          fi

          # 3) Create PR if none exists
          echo "üîß Creating PR via gh api..."
          set +e
          CREATE_OUT="$(gh api -X POST "repos/${REPO}/pulls" \
            -f title="$TITLE" \
            -f head="staging" \
            -f base="main" \
            -f body="$BODY_CONTENT" \
            --jq .number 2>&1)"
          STATUS=$?
          set -e

          if [ $STATUS -ne 0 ] || [ -z "$CREATE_OUT" ] || [ "$CREATE_OUT" = "null" ]; then
            echo "‚ö†Ô∏è PR creation failed, attempting to find existing PR (likely already open)..."
            PR_NUMBER="$(gh pr list --base main --head staging --state open --json number --jq '.[0].number' || true)"
            if [ -n "${PR_NUMBER:-}" ] && [ "${PR_NUMBER}" != "null" ]; then
              echo "‚úÖ Reusing existing PR #$PR_NUMBER ‚Äî updating title/body with latest analysis..."
              gh api -X PATCH "repos/${REPO}/pulls/${PR_NUMBER}" \
                -f title="$TITLE" \
                -f body="$BODY_CONTENT" >/dev/null
              PR_URL="$(gh pr view "$PR_NUMBER" --json url --jq .url)"
              echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
              echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
              echo "üîó PR Link: $PR_URL"
            else
              echo "‚ùå Unable to create or find existing PR. Original error:"
              echo "$CREATE_OUT"
              exit 1
            fi
          else
            PR_NUMBER="$CREATE_OUT"
            PR_URL="$(gh api "repos/${REPO}/pulls/${PR_NUMBER}" --jq .html_url)"
            echo "üè∑Ô∏è Adding labels..."
            printf '{"labels":["production","deployment","release","auto-generated"]}\n' > labels.json
            gh api -X POST "repos/${REPO}/issues/${PR_NUMBER}/labels" --input labels.json >/dev/null || true

            echo "üë• Requesting reviewers..."
            printf '{"reviewers":["rahulcheryala","your-senior-dev"]}\n' > reviewers.json
            gh api -X POST "repos/${REPO}/pulls/${PR_NUMBER}/requested_reviewers" --input reviewers.json >/dev/null || true

            echo "‚úÖ PR created: #$PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
            echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
            echo "üîó PR Link: $PR_URL"
          fi

  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true'
    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push release tag
        run: |
          set -euo pipefail
          TAG="${{ needs.commit-analysis.outputs.release_tag }}"
          echo "üè∑Ô∏è Creating release tag: $TAG"
          # Avoid error if already exists locally
          git tag -f "$TAG"
          git push -f origin "refs/tags/$TAG"
          echo "‚úÖ Tag pushed."

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [commit-analysis, create-pr, create-release-tag]
    if: always() && needs.commit-analysis.outputs.promotion_needed == 'true'
    steps:
      - name: Display workflow summary
        run: |
          echo ""
          echo "================================================"
          echo "üöÄ PRODUCTION PROMOTION WORKFLOW COMPLETED"
          echo "================================================"
          echo ""
          echo "‚úÖ Analysis complete"
          if [ "${{ needs.create-pr.result }}" = "success" ]; then
            echo "‚úÖ PR created"
          else
            echo "‚ö†Ô∏è PR not created (skipped or failed)"
          fi
          echo "‚úÖ Tag created"
          echo ""
          echo "üìã Release Details:"
          echo "  ‚Ä¢ Release Tag: ${{ needs.commit-analysis.outputs.release_tag }}"
          echo "  ‚Ä¢ Timestamp: ${{ needs.commit-analysis.outputs.timestamp }}"
          echo "  ‚Ä¢ Commit Count: ${{ needs.commit-analysis.outputs.commit_count }}"
          echo "  ‚Ä¢ PR Number: ${{ needs.create-pr.outputs.pr_number }}"
          echo ""
          echo "üîó PR Link: ${{ needs.create-pr.outputs.pr_url }}"
          echo "‚ö†Ô∏è Reminder: Merging deploys to PRODUCTION."
          echo ""
