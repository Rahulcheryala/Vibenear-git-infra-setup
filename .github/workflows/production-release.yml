name: Production Release
run-name: Production Release by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      create_pr:
        description: "Create PR from staging to main for production deployment"
        required: true
        default: true
        type: boolean
      release_notes:
        description: "Release notes for prod deployment"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1: Analyze Staging Commits
  commit-analysis:
    name: Commit Analysis
    runs-on: ubuntu-latest
    outputs:
      promotion_needed: ${{ steps.analyze.outputs.promotion_needed }}
      commit_count: ${{ steps.analyze.outputs.commit_count }}
      release_tag: ${{ steps.analyze.outputs.release_tag }}
      timestamp: ${{ steps.analyze.outputs.timestamp }}
      new_commits: ${{ steps.analyze.outputs.new_commits }}
      existing_pr: ${{ steps.analyze.outputs.existing_pr }}

    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch main branch and tags
        run: |
          echo "üì• Fetching main branch for comparison..."
          git fetch origin main:origin-main --tags
          echo "‚úÖ Main branch fetched successfully"

      - name: Analyze staging commits for production promotion
        id: analyze
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "üì• Ensuring origin/main and tags are up to date..."
          git fetch origin main:origin-main --tags

          echo "üîç Quick tree diff (staging vs main)..."
          if git diff --quiet origin-main..HEAD; then
            echo "‚úÖ Staging and main have identical content"
            {
              echo "promotion_needed=false"
              echo "commit_count=0"
              echo "release_tag="
              echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')"
              echo "existing_pr="
              echo "new_commits="
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 1) Prefer baseline from the last merged staging‚Üímain PR to handle squash merges correctly
          echo "üîé Determining baseline from the last merged staging‚Üímain PR..."
          LAST_MERGED_PR="$(gh pr list --base main --head staging --state merged --limit 1 --json number --jq '.[0].number' || true)"
          BASELINE_REF=""
          BASELINE_SOURCE=""

          if [ -n "${LAST_MERGED_PR:-}" ] && [ "${LAST_MERGED_PR}" != "null" ]; then
            echo "‚ÑπÔ∏è Last merged PR detected: #${LAST_MERGED_PR}"
            # Get the last commit OID from that PR
            LAST_PR_COMMIT="$(gh pr view "${LAST_MERGED_PR}" --json commits --jq '.commits.nodes[-1].oid' || true)"
            if [ -n "${LAST_PR_COMMIT:-}" ] && git merge-base --is-ancestor "${LAST_PR_COMMIT}" HEAD; then
              BASELINE_REF="${LAST_PR_COMMIT}"
              BASELINE_SOURCE="last_merged_pr_commit"
              echo "‚úÖ Using PR #${LAST_MERGED_PR} last commit as baseline: ${BASELINE_REF}"
            else
              echo "‚ö†Ô∏è Could not use PR baseline (commit missing or not ancestor of staging)."
            fi
          else
            echo "‚ÑπÔ∏è No merged staging‚Üímain PR found yet."
          fi

          # 2) Fallback: use last release_* tag reachable from main (your current logic)
          if [ -z "${BASELINE_REF:-}" ]; then
            echo "üîé Fallback: Find last release_* tag reachable from main..."
            LAST_MAIN_TAG=""
            for t in $(git tag --list 'release_*' --sort=-creatordate); do
              if git merge-base --is-ancestor "$(git rev-parse "$t^{commit}")" origin-main; then
                LAST_MAIN_TAG="$t"
                break
              fi
            done

            if [ -n "$LAST_MAIN_TAG" ]; then
              BASELINE_REF="$LAST_MAIN_TAG"
              BASELINE_SOURCE="last_main_release_tag"
              echo "‚úÖ Using last main release tag as baseline: ${BASELINE_REF}"
            else
              # ultimate fallback: compare directly to origin-main
              BASELINE_REF="origin-main"
              BASELINE_SOURCE="origin_main_head"
              echo "‚ö†Ô∏è No main release tag found; using ${BASELINE_REF} as baseline."
            fi
          fi

          # 3) Build range of commits strictly after the baseline on staging
          LOG_RANGE="${BASELINE_REF}..HEAD"
          echo "üß≠ Commit range to analyze: ${LOG_RANGE} (baseline source: ${BASELINE_SOURCE})"

          echo "üìù Collect SHAs in range (no merges, oldest first)..."
          mapfile -t SHAS_IN_RANGE < <(git rev-list --no-merges --reverse "$LOG_RANGE" || true)
          if [ "${#SHAS_IN_RANGE[@]}" -eq 0 ]; then
            echo "‚ÑπÔ∏è No candidate commits in range"
            {
              echo "promotion_needed=false"
              echo "commit_count=0"
              echo "release_tag="
              echo "timestamp=$(date +'%d/%m/%Y %H:%M:%S UTC')"
              echo "existing_pr="
              echo "new_commits="
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # With a PR-baseline this list already contains only new work since last promotion.
          # For tag-baseline fallback, some historical commits may still appear due to squash merges,
          # but in normal flow the PR-baseline will be present and accurate.

          TIMESTAMP="$(date +'%d/%m/%Y %H:%M:%S UTC')"

          echo "üîé Check if an open staging‚Üímain PR exists and try to reuse its tag..."
          EXISTING_PR="$(gh pr list --base main --head staging --state open --json number --jq '.[0].number' || true)"
          EXISTING_TAG=""
          if [ -n "${EXISTING_PR:-}" ] && [ "${EXISTING_PR}" != "null" ]; then
            echo "‚ÑπÔ∏è Open PR detected: #$EXISTING_PR"
            PR_TEXT="$(gh pr view "$EXISTING_PR" --json title,body --jq '[.title,.body]|join("\n")' || true)"
            # Extract existing Release Tag value if present
            EXISTING_TAG="$(printf "%s" "$PR_TEXT" | sed -nE 's/.*Release Tag[^`]*`([^`]+)`.*/\1/p' | head -n1 || true)"
          fi

          if [ -n "${EXISTING_TAG:-}" ]; then
            RELEASE_TAG="$EXISTING_TAG"
            echo "üîÅ Reusing existing PR release tag: $RELEASE_TAG"
          else
            RELEASE_TAG="release_$(date +'%d-%m-%Y_%H.%M.%S')"
            echo "üÜï Generated new release tag: $RELEASE_TAG"
          fi

          # Build human-readable list for PR body
          NEW_COMMITS=""
          for sha in "${SHAS_IN_RANGE[@]}"; do
            subj="$(git log -n1 --format=%s "$sha")"
            NEW_COMMITS+="${sha:0:7} ${subj}"$'\n'
          done
          COMMIT_COUNT="${#SHAS_IN_RANGE[@]}"

          echo "üìä Analysis Results:"
          echo "  ‚Ä¢ Commits to promote: $COMMIT_COUNT"
          echo "  ‚Ä¢ Release tag: $RELEASE_TAG"
          echo "  ‚Ä¢ Timestamp: $TIMESTAMP"
          echo "  ‚Ä¢ Baseline source: $BASELINE_SOURCE"
          echo ""
          echo "üìù Commits to be promoted to production:"
          printf "%s\n" "$NEW_COMMITS"
          echo ""

          {
            echo "promotion_needed=true"
            echo "commit_count=$COMMIT_COUNT"
            echo "release_tag=$RELEASE_TAG"
            echo "timestamp=$TIMESTAMP"
            echo "existing_pr=${EXISTING_PR:-}"
          } >> "$GITHUB_OUTPUT"
          {
            echo "new_commits<<EOF"
            printf "%s\n" "$NEW_COMMITS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  # Job 2: Create Production Promotion PR
  create-pr:
    name: Create Production PR
    runs-on: ubuntu-latest
    needs: commit-analysis
    if: needs.commit-analysis.outputs.promotion_needed == 'true' && inputs.create_pr
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
      pr_url: ${{ steps.create_pr.outputs.pr_url }}

    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure full fetch
        run: git fetch --all --prune --tags

      - name: Create or reuse PR from staging to main
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          REPO="${GITHUB_REPOSITORY}"

          TITLE="üöÄ Production Release: ${{ needs.commit-analysis.outputs.release_tag }}"

          BODY_CONTENT="## üöÄ Production Deployment

          This PR promotes the staging environment to production.

          ### üìã Release Information
          - **Release Tag**: \`${{ needs.commit-analysis.outputs.release_tag }}\`
          - **Timestamp**: ${{ needs.commit-analysis.outputs.timestamp }}
          - **Commit Count**: ${{ needs.commit-analysis.outputs.commit_count }} commits
          - **Source**: \`staging\`
          - **Target**: \`main\`
          - **Triggered By**: @${{ github.actor }} via manual workflow dispatch

          ### üìù Features to be Deployed
          \`\`\`text
          ${{ needs.commit-analysis.outputs.new_commits }}
          \`\`\`

          ### üìí Release Notes
          ${{ inputs.release_notes }}

          ### üîÑ What Happens on Merge
          1. Squash merge into a single release commit
          2. Tag \`${{ needs.commit-analysis.outputs.release_tag }}\` will be created (by post-merge workflow)
          3. Production deployment triggered
          4. Clean history: one commit per production release

          ### ‚ö†Ô∏è Important
          - Deploys to **PRODUCTION**
          - Rollback = revert the single release commit
          - Ensure all staging validations are complete

          ### ‚úÖ Pre-deployment Checklist
          - [ ] Staging tests passed
          - [ ] Code review complete
          - [ ] DB migrations verified
          - [ ] Release notes reviewed

          ---
          üîí Requires multiple approvals.

          üë• Reviewers: @rahulcheryala @your-senior-dev"

          echo "üìù Ensuring PR base=main head=staging"

          echo "üîé Checking for existing open PR from staging ‚Üí main..."
          EXISTING_NUMBER="$(gh pr list --base main --head staging --state open --json number --jq '.[0].number' || true)"
          if [ -n "${EXISTING_NUMBER:-}" ] && [ "${EXISTING_NUMBER}" != "null" ]; then
            PR_NUMBER="$EXISTING_NUMBER"
            echo "üîÅ Reusing PR #$PR_NUMBER and updating title/body..."
            gh api -X PATCH "repos/${REPO}/pulls/${PR_NUMBER}" -f title="$TITLE" -f body="$BODY_CONTENT" >/dev/null
          else
            echo "üÜï Creating PR base=main head=staging..."
            PR_NUMBER="$(gh api -X POST "repos/${REPO}/pulls" \
              -f title="$TITLE" \
              -f head="staging" \
              -f base="main" \
              -f body="$BODY_CONTENT" \
              --jq .number)"
          fi

          PR_URL="$(gh api "repos/${REPO}/pulls/${PR_NUMBER}" --jq .html_url)"

          echo "üè∑Ô∏è Adding labels and requesting reviewers..."
          printf '{"labels":["production","deployment","release","auto-generated"]}\n' > labels.json
          gh api -X POST "repos/${REPO}/issues/${PR_NUMBER}/labels" --input labels.json >/dev/null || true
          printf '{"reviewers":["rahulcheryala","your-senior-dev"]}\n' > reviewers.json
          gh api -X POST "repos/${REPO}/pulls/${PR_NUMBER}/requested_reviewers" --input reviewers.json >/dev/null || true

          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
          echo "üîó PR Link: $PR_URL"

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [commit-analysis, create-pr]
    if: always() && needs.commit-analysis.outputs.promotion_needed == 'true'
    steps:
      - name: Display workflow summary
        run: |
          echo ""
          echo "================================================"
          echo "üöÄ PRODUCTION PROMOTION WORKFLOW COMPLETED"
          echo "================================================"
          echo ""
          echo "‚úÖ Analysis complete"
          if [ "${{ needs.create-pr.result }}" = "success" ]; then
            echo "‚úÖ PR created/updated"
          else
            echo "‚ö†Ô∏è PR not created (skipped or failed)"
          fi
          echo ""
          echo "üìã Release Details:"
          echo "  ‚Ä¢ Release Tag: ${{ needs.commit-analysis.outputs.release_tag }}"
          echo "  ‚Ä¢ Timestamp: ${{ needs.commit-analysis.outputs.timestamp }}"
          echo "  ‚Ä¢ Commit Count: ${{ needs.commit-analysis.outputs.commit_count }}"
          echo "  ‚Ä¢ PR Number: ${{ needs.create-pr.outputs.pr_number }}"
          echo ""
          echo "üîó PR Link: ${{ needs.create-pr.outputs.pr_url }}"
          echo "‚ö†Ô∏è Reminder: Merging deploys to PRODUCTION."
          echo ""
